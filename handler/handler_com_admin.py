from telebot import types

from data.loader import bot
from data.texts import t_welcome
from database import quasi_db
from keyboard.replay.reply_button import welcome_btn
from utils.mailing import mailing_msg

_msg_ids = []
_msg_start_id = 0


@bot.message_handler(is_admin=True, commands=['start'])
def welcome(message):
    bot.clear_reply_handlers(message)

    markup = welcome_btn()

    btn1 = types.KeyboardButton('‚ùó –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º ‚ùó')
    markup.add(btn1)

    bot.send_message(message.chat.id, t_welcome, reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data == 'back_to_message_everyone')
@bot.message_handler(is_admin=True, func=lambda message: message.text == '‚ùó –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º ‚ùó')
def message_everyone(message):
    global _msg_start_id
    _text = '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –∏ –Ω–∞–∂–º–∏—Ç–µ "–ì–æ—Ç–æ–≤–æ"'

    if type(message) is types.Message:
        _msg_start_id = message.id
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(
            types.KeyboardButton(text='–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'),
            types.KeyboardButton('–ì–æ—Ç–æ–≤–æ'))
        bot.send_message(message.chat.id, _text, reply_markup=markup)

    if type(message) is types.CallbackQuery:
        chat_id = message.message.chat.id
        message_id = message.message.message_id
        _msg_start_id = message_id-1
        bot.edit_message_text(chat_id=chat_id, message_id=message_id,
                              text=_text)


@bot.message_handler(is_admin=True, func=lambda message: message.text == '–ì–æ—Ç–æ–≤–æ')
def message_everyone(message):
    global _msg_ids, _msg_start_id
    _collect_ids = []

    for i in range(_msg_start_id+2, message.id):
        _collect_ids.append(i)
    _msg_ids = _collect_ids

    _markup = types.InlineKeyboardMarkup(row_width=1)
    _text = ''
    if not _msg_ids:
        _markup.add(
            types.InlineKeyboardButton(text='–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ üü¢', callback_data='back_to_message_everyone'),
            types.InlineKeyboardButton(text='–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üî¥', callback_data='back_to_menu'),
        )
        _text = '–°–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.'

    else:
        _markup.add(
            types.InlineKeyboardButton(text='–î–∞, –≤—Å–µ –≤–µ—Ä–Ω–æ üü¢', callback_data='dispatch'),
            types.InlineKeyboardButton(text='–ù–µ—Ç, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ üî¥', callback_data='back_to_message_everyone'),
        )
        _text = '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É.'

    bot.send_message(message.chat.id, _text, reply_markup=_markup)


@bot.callback_query_handler(func=lambda call: call.data == 'dispatch')
def exhibitors_submenu(call):
    global _msg_ids

    my_sql = quasi_db.MySQL('inprom_users.db')
    users = my_sql.get_all_users_ids()

    chat_id = call.message.chat.id
    message_id = call.message.message_id

    mailing_msg(users, chat_id, _msg_ids)

    markup = types.InlineKeyboardMarkup(row_width=1)
    markup.add(
        types.InlineKeyboardButton(text='–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='back_to_menu'),
    )
    bot.edit_message_text(chat_id=chat_id, message_id=message_id, text='–°–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ‚úÖ', reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data == 'back_to_menu')
@bot.message_handler(is_admin=True, func=lambda message: message.text == '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
def exhibitors_submenu(message):
    chat_id = message.chat.id
    message_id = message.id
    if type(message) is types.CallbackQuery:
        chat_id = message.message.chat.id
        message_id = message.message.message_id

    markup = welcome_btn()
    markup.add(types.KeyboardButton('‚ùó –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º ‚ùó'))

    bot.delete_message(chat_id, message_id)
    bot.send_message(chat_id, '–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é', reply_markup=markup)
    