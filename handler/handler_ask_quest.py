from telebot import types

from data.config import TECHNICAL_SUPPORT
from data.loader import bot
from keyboard.inline.inline_button import *
from keyboard.replay.reply_button import welcome_btn

_msg_id = 0


@bot.message_handler(commands=["help"])
@bot.message_handler(func=lambda message: message.text == 'üî∏ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å üî∏')
def ask_question(message):
    global _msg_id
    _msg_id = message.id
    _markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    _markup.add(
        types.KeyboardButton('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'),)

    msg = bot.send_message(
        message.chat.id,
        '<b><i>–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –±–æ—Ç—É <u>–æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º</u>.\n–°–∫–æ—Ä–æ –≤–∞–º –æ—Ç–≤–µ—Ç–∏—Ç –∫–æ–º–∞–Ω–¥–∞ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∏.</i></b>',
        reply_markup=_markup, parse_mode='html')

    bot.register_next_step_handler(msg, send_reply)


def send_reply(message):
    _chat_id = message.chat.id

    _markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    _markup.add(
        types.KeyboardButton('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'),
        types.KeyboardButton('–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å'),
    )

    if message.text == '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        _markup = welcome_btn()
        bot.send_message(_chat_id, '<b><i>–°–æ–æ–±—â–µ–Ω–∏–µ <u>–Ω–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ</u>, –≤—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.</i></b>',
                         reply_markup=_markup, parse_mode='html')
    else:
        bot.send_message(_chat_id, '<b><i>–ü—Ä–æ–≤–µ—Ä—Ç–∏ –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É.</i></b>',
                         reply_markup=_markup, parse_mode='html')


@bot.message_handler(func=lambda message: message.text == '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å')
def ask_question(message):
    global _msg_id

    _chat_id = message.chat.id
    _markup = welcome_btn()

    for _id in TECHNICAL_SUPPORT:
        bot.forward_message(_id, _chat_id, _msg_id + 2)
    bot.send_message(_chat_id, '<b><i>–°–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ, –æ–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.</i></b>',
                     reply_markup=_markup, parse_mode='html')


@bot.message_handler(content_types='text')
def handle_text(message):
    global _msg_id
    _chat_id = message.chat.id
    _markup = welcome_btn()

    if message.text == '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å':
        for _id in TECHNICAL_SUPPORT:
            bot.forward_message(_id, _chat_id, _msg_id + 2)

        bot.send_message(_chat_id, '<b><i>–°–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ, –æ–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.</i></b>',
                         reply_markup=_markup, parse_mode='html')

    if message.text == '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        bot.send_message(_chat_id, '<b><i>–°–æ–æ–±—â–µ–Ω–∏–µ <u>–Ω–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ</u>, –≤—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.</i></b>',
                         reply_markup=_markup, parse_mode='html')

    if int(message.chat.id) in TECHNICAL_SUPPORT:
        try:
            help_user_id = message.reply_to_message.forward_from.id
            bot.send_message(help_user_id,
                             f'<b><i>–ö–æ–º–∞–Ω–¥–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –æ—Ç–≤–µ—Ç–∏–ª–∞ –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å.</i></b>\n\n{message.text}',
                             parse_mode='html')
        except Exception:
            pass
